#!/usr/bin/python3

import argparse
import os
import sys
import string
import collections

Settings = collections.namedtuple('Settings',['project_name', 'class_name', 'message_types', 'message_dependencies', 'reactive_input_names','reactive_input_names_cs'])


def createCatkinFiles(args,msg_files,srv_files, settings):
    cmake_msg_deps = ' '.join(settings.message_dependencies)
    # CmakeLists.txt
    fcmake = open(os.path.join(args.package_name, "CMakeLists.txt"),"w")
    fcmake.write('cmake_minimum_required(VERSION 2.8.3)\n'
    'project({0})\n'
    '\n'
    'find_package(catkin REQUIRED\n'
    'roscpp\n'
    'message_generation\n'
    'resource_management_msgs\n'
    '{catkin_msgs_deps}\n'
    ')\n'
    '\n'
    '## Generate messages in the \'msg\' folder\n'
    'add_message_files(\n'
    'FILES\n'
    '{msgs}\n'
    'StateMachine.msg'
    ')\n'
    '\n'
    '## Generate services in the \'srv\' folder\n'
    'add_service_files(\n'
    'FILES\n'
    '{srvs}\n'
    ')\n'
    '\n'
    'generate_messages(DEPENDENCIES resource_management_msgs {catkin_msgs_deps})\n'
    '\n'
    'catkin_package(CATKIN_DEPENDS message_runtime {catkin_msgs_deps})\n'
    .format(settings.project_name,catkin_msgs_deps=cmake_msg_deps,msgs=" ".join(msg_files),srvs=" ".join(srv_files))
    )
    fcmake.close()

    pack_deps = ['<depend>'+x+'</depend>\n' for x in settings.message_dependencies]
    # package.xml
    fpackage = open(os.path.join(args.package_name, "package.xml"),"w")
    fpackage.write('<package format="2">\n'
    '<name>{0}</name>\n'
    '<version>0.0.0</version>\n'
    '<description>\n'
    '{0} package autogenerated from resource_manager messages generator.\n'
    '</description>\n'
    '<maintainer email="todo@todo.org">TBD</maintainer>\n'
    '<license>TBD</license>\n'
    '<depend>roscpp</depend>\n'
    '<depend>resource_management_msgs</depend>\n'
    '{depends}'
    '<buildtool_depend>catkin</buildtool_depend>\n'
    '<build_depend>message_generation</build_depend>\n'
    '<exec_depend>message_runtime</exec_depend>\n'
    '</package>\n'.format(settings.project_name,depends=''.join(pack_deps)))
    fpackage.close()

def underscore_to_CamelCase(word):
    return ''.join(x.capitalize() or '_' for x in word.split('_'))

def create_folders(settings):
    os.makedirs(os.path.join(settings.project_name,"msg"),exist_ok=True)
    os.makedirs(os.path.join(settings.project_name,"srv"),exist_ok=True)

def substitue_for_loop(tpl,for_var,the_list):
    res=""
    for x in the_list:
        res+=eval('tpl.format({}=x)'.format(for_var))
    return res

def substitue_fmt(tpl,unused0,the_var):
    return tpl.format(the_var)


def configure_template(template_path, output_path,settings):
    f_in = open(template_path,'r')
    tpl = ""
    tpl_inside=""
    for_var=""
    inside=False
    for line in f_in:
        if line.startswith('!!for '):
            inside='for_loop'
            command=line[2:-1]
            for_var=command[command.find(' ')+1:]
            for_var=for_var[0:for_var.find(' ')]
            for_list=command[command.find(' in ')+4:]
            tpl_inside=""
        elif line.startswith('!!fmt '):
            inside='fmt'
            command=line[2:-1]
            for_list=command[command.find(' ')+1:]
            tpl_inside=""
        elif line.startswith('!!end'):
            tpl+=eval('substitue_{}(tpl_inside,for_var,settings.{})'.format(inside,for_list))
            inside=None
        elif inside:
            tpl_inside+=line
        else:
            tpl+=line
    f_in.close()


    # write main cpp file

    fo = open(output_path,"w+")
    fo.write(string.Template(tpl).substitute(**settings._asdict()))
    fo.close()


def main():

    parser = argparse.ArgumentParser(description="generate a resource manager node")
    parser.add_argument("--package-name",metavar="PKG", type=str, required=True,
            help="name of the project/package")
    parser.add_argument("--target-types", type=str, metavar="name,ros_data_type,cpp_type", nargs='+', help="", required=True)
    parser.add_argument("--reactive-topics", type=str, metavar="topic_name", nargs='+', help="")

    args=parser.parse_args()
    generator_dir=os.path.dirname(sys.argv[0])
    in_msg_dir = os.path.join(generator_dir,"cmake","gen","msg")

    message_types = [x.split(',') for x in args.target_types]
    project_name=args.package_name
    class_name=underscore_to_CamelCase(project_name)

    reactive_input_names=args.reactive_topics
    reactive_input_names_cs = ', '.join(['"'+x+'"' for x in reactive_input_names])

    # try to infer dependencies for the message types from the input messages
    message_dependencies=set()
    for data_type in message_types :
        if '/' in data_type[1]:
            message_dependencies.add(data_type[1].split('/',1)[0])

    settings = Settings(project_name, class_name, message_types, message_dependencies, reactive_input_names,reactive_input_names_cs)

    #package architecture
    create_folders(settings)

    # .msg files
    msg_files=[]
    srv_files=[]

    #   StateMachineState
    for x in message_types :
        name=x[0]
        data_type=x[1]
        filename='StateMachineState'+name+'.msg'
        msg_files.append(filename)
        f = open(os.path.join(args.package_name,'msg',filename),'w+')
        f.write("resource_management_msgs/StateMachineStateHeader header\n")
        f.write("{} data\n".format(data_type))
        f.close()

    #   PriorityTarget
    for x in message_types :
        name=x[0]
        data_type=x[1]
        filename = ''+name+'.msg'
        msg_files.append(filename)
        f = open(os.path.join(args.package_name,'msg',filename),'w+')
        f.write("resource_management_msgs/MessagePriority priority\n")
        f.write("{} data\n".format(data_type))
        f.close()

    #   StateMachine
    filename = 'StateMachine.msg'
    with open(os.path.join(args.package_name, 'msg', filename), 'w+') as f:
        for x in message_types :
            name=x[0]
            #data_type=x[1]
            f.write("{}[] states_{}\n".format('StateMachineState'+name,name))



    #   StateMachine Service
    filename='StateMachineRegister.srv'
    srv_files.append(filename)
    f_signal=open(os.path.join(args.package_name,'srv',filename),'w+')
    f_signal.write("resource_management_msgs/StateMachineHeader header\n")
    f_signal.write("StateMachine state_machine\n")
    f_signal.write("---\n")
    f_signal.write("uint32 id")

    #   Extract Service
    filename='StateMachineExtract.srv'
    srv_files.append(filename)
    f_signal=open(os.path.join(args.package_name,'srv',filename),'w+')
    f_signal.write("StateMachine state_machine\n")
    f_signal.write("---\n")
    f_signal.write("string[] synchros")


    createCatkinFiles(args,msg_files, srv_files, settings)


if __name__ == '__main__':
    main()
