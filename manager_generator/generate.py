#!/usr/bin/python3

import argparse
import os
import sys
import string


def substitue_for_loop(tpl,for_var,the_list):
    res=""
    for x in the_list:
        res+=eval('tpl.format({}=x)'.format(for_var))
    return res

def createCatkinFiles(args,msg_files):
    # CmakeLists.txt
    fcmake = open(os.path.join(args.package_name, "CMakeLists.txt"),"w")
    fcmake.write('cmake_minimum_required(VERSION 2.8.3)\n'
    'project({0})\n'
    'add_compile_options(-std=c++14 -Wall -pthread)\n'
    'find_package(catkin REQUIRED\n'
    'roscpp\n'
    'message_generation\n'
    'resource_management\n'
    ')\n'
    '\n'
    'add_message_files(\n'
    'FILES\n'
    '{msgs}\n'
    ')\n'
    'generate_messages(DEPENDENCIES resource_management)\n'
    'catkin_package(\n'
    '#INCLUDE_DIRS include\n'
    '#LIBRARIES ${{PROJECT_NAME}}\n'
    'CATKIN_DEPENDS roscpp message_runtime\n'
    '# DEPENDS\n'
    ')\n'
    'include_directories(${{catkin_INCLUDE_DIRS}})\n'
    'add_executable(${{PROJECT_NAME}} src/${{PROJECT_NAME}}.cpp)\n'
    'add_dependencies(${{PROJECT_NAME}} ${{${{PROJECT_NAME}}_EXPORTED_TARGETS}})\n'
    'target_link_libraries(${{PROJECT_NAME}} ${{catkin_LIBRARIES}})\n'.format(project_name,msgs=" ".join(msg_files))
    )
    fcmake.close()

    # package.xml
    fpackage = open(os.path.join(args.package_name, "package.xml"),"w")
    fpackage.write('<package format="2">\n'
    '<name>{0}</name>\n'
    '<version>0.0.0</version>\n'
    '<description>\n'
    '{0} package autogenerated from resource_manager generator.\n'
    '</description>\n'
    '<maintainer email="todo@todo.org">TBD</maintainer>\n'
    '<license>TBD</license>\n'
    '<depend>roscpp</depend>\n'
    '<depend>resource_management</depend>\n'
    '<buildtool_depend>catkin</buildtool_depend>\n'
    '<build_depend>message_generation</build_depend>\n'
    '<exec_depend>message_runtime</exec_depend>\n'
    '</package>\n'.format(args.package_name))
    fpackage.close()



parser = argparse.ArgumentParser(description="generate a resource manager node")
parser.add_argument("--package-name",metavar="PKG", type=str, required=True,
        help="name of the project/package")
parser.add_argument("--target-types", type=str, metavar="name:ros_data_type:cpp_type", nargs='+', help="", required=True)
parser.add_argument("--reactive-topics", type=str, metavar="topic_name", nargs='+', help="")

args=parser.parse_args()
generator_dir=os.path.dirname(sys.argv[0])
in_msg_dir = os.path.join(generator_dir,"cmake","gen","msg")

message_names=[x.split(':')[0] for x in args.target_types]
ros_data_types=[x.split(':')[1] for x in args.target_types]
cpp_types=[x.split(':')[2] for x in args.target_types]
messages_types_zip=zip(message_names,ros_data_types,cpp_types)
project_name=args.package_name
reactive_input_names=args.reactive_topics
reactive_input_names_cs = ', '.join(['"'+x+'"' for x in reactive_input_names])


#package architecture
os.makedirs(os.path.join(project_name,"src"))
os.makedirs(os.path.join(project_name,"msg"))


# .msg files

msg_files=[]

#   CoordinationState
for x in args.target_types :
    name=x.split(':')[0]
    data_type=x.split(':')[1]
    filename='CoordinationState'+name+'.msg'
    msg_files.append(filename)
    f = open(os.path.join(args.package_name,'msg',filename),'w')
    f.write("resource_management/CoordinationStateHeader header\n")
    f.write("{} data\n".format(data_type))
    f.close()

#   PriorityTarget
for x in args.target_types :
    name=x.split(':')[0]
    data_type=x.split(':')[1]
    filename = ''+name+'.msg'
    msg_files.append(filename)
    f = open(os.path.join(args.package_name,'msg',filename),'w')
    f.write("resource_management/PriorityTargetHeader priority\n")
    f.write("{} data\n".format(data_type))
    f.close()


#   CoordinationSignal
filename='CoordinationSignal.msg'
msg_files.append(filename)
f_signal=open(os.path.join(args.package_name,'msg',filename),'w')
f_signal.write("resource_management/CoordinationSignalHeader header\n")
for x in args.target_types :
    name=x.split(':')[0]
    #data_type=x.split(':')[1]
    f_signal.write("{}[] states_{}\n".format('CoordinationState'+name,name))

createCatkinFiles(args,msg_files)


f_in = open(os.path.join(generator_dir,'template_main.cpp'),'r')
tpl = ""
tpl_inside=""
for_var=""
inside=False
for line in f_in:
    if line.startswith('!!for '):
        inside=True
        command=line[2:-1]
        for_var=command[command.find(' ')+1:]
        for_var=for_var[0:for_var.find(' ')]
        for_list=command[command.find(' in ')+4:]
        tpl_inside=""
    elif line.startswith('!!end'):
        inside=False
        #command+='    tmp_tpl=Template(tpl_inside)\n    tpl+=tmp_tpl.safe_substitute({0}={0})'.format(for_var)
        tpl+=eval('substitue_for_loop(tpl_inside,for_var,{})'.format(for_list))
    elif inside:
        tpl_inside+=line
    else:
        tpl+=line
f_in.close()


# write main cpp file
mainfile=os.path.join(project_name, "src", project_name +".cpp")

fo = open(mainfile,"w")
fo.write(string.Template(tpl).substitute(**locals()))
fo.close()

