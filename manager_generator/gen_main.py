#!/usr/bin/python3

import argparse
import os
import sys

parser = argparse.ArgumentParser(description="generate a resource manager node")
parser.add_argument("--package-name",metavar="PKG", type=str, required=True,
        help="name of the project/package")
parser.add_argument("--target-types", type=str, metavar="name:data_type", nargs='+', help="", required=True)
parser.add_argument("--priority-topics", type=str, metavar="topic_name:msg_type", nargs='+', help="msg_type is one defined in --priority_msgs")

args=parser.parse_args()
generator_dir=os.path.dirname(sys.argv[0])
in_msg_dir = os.path.join(generator_dir,"cmake","gen","msg")

print(args)

#package architecture
os.makedirs(os.path.join(args.package_name,"src"))
os.makedirs(os.path.join(args.package_name,"msg"))


def createCatkinFiles(args,msg_files):
    # CmakeLists.txt
    fcmake = open(os.path.join(args.package_name, "CMakeLists.txt"),"w")
    fcmake.write('cmake_minimum_required(VERSION 2.8.3)\n'
    'project({0})\n'
    'find_package(catkin REQUIRED\n'
    'roscpp\n'
    'message_generation\n'
    'resource_management\n'
    ')\n'
    '\n'
    'add_message_files(\n'
    'FILES\n'
    '{msgs}\n'
    ')\n'
    'generate_messages(DEPENDENCIES resource_management)\n'
    'catkin_package(\n'
    '#INCLUDE_DIRS include\n'
    '#LIBRARIES ${{PROJECT_NAME}}\n'
    'CATKIN_DEPENDS roscpp message_runtime\n'
    '# DEPENDS\n'
    ')\n'
    'include_directories(${{catkin_INCLUDE_DIRS}})\n'
    'add_executable(${{PROJECT_NAME}} src/${{PROJECT_NAME}}.cpp)'.format(args.package_name,msgs=" ".join(msg_files))
    )
    fcmake.close()

    # package.xml
    fpackage = open(os.path.join(args.package_name, "package.xml"),"w")
    fpackage.write('<package format="2">\n'
    '<name>{0}</name>\n'
    '<version>0.0.0</version>\n'
    '<description>\n'
    '{0} package autogenerated from resource_manager generator.\n'
    '</description>\n'
    '<maintainer email="todo@todo.org">TBD</maintainer>\n'
    '<license>TBD</license>\n'
    '<depend>roscpp</depend>\n'
    '<depend>resource_management</depend>\n'
    '<buildtool_depend>catkin</buildtool_depend>\n'
    '<build_depend>message_generation</build_depend>\n'
    '<exec_depend>message_runtime</exec_depend>\n'
    '</package>\n'.format(args.package_name))
    fpackage.close()


# .msg files

msg_files=[]

#   StateMachineState
for x in args.target_types :
    name=x.split(':')[0]
    data_type=x.split(':')[1]
    filename='StateMachineState'+name+'.msg'
    msg_files.append(filename)
    f = open(os.path.join(args.package_name,'msg',filename),'w')
    f.write("resource_management/StateMachineStateHeader header\n")
    f.write("{} data\n".format(data_type))
    f.close()

#   PriorityTarget
for x in args.target_types :
    name=x.split(':')[0]
    data_type=x.split(':')[1]
    filename = 'Priority'+name+'.msg'
    msg_files.append(filename)
    f = open(os.path.join(args.package_name,'msg',filename),'w')
    f.write("resource_management/PriorityTargetHeader priority\n")
    f.write("{} data\n".format(data_type))
    f.close()


#   StateMachine
filename='StateMachine.msg'
msg_files.append(filename)
f_signal=open(os.path.join(args.package_name,'msg',filename),'w')
f_signal.write("resource_management/EndCondition end_condition # state machine must stop whatever state it is in if this condition is verified\n")
for x in args.target_types :
    name=x.split(':')[0]
    data_type=x.split(':')[1]
    f_signal.write("{}[] states_{}\n".format('StateMachineState'+name,data_type))

createCatkinFiles(args,msg_files)

# main node code:

mainfile=os.path.join(args.package_name, "src", args.package_name+".cpp")

fo = open(mainfile,"w")

# include message headers
fo.write('#include "{}/{}.h"\n'.format(args.package_name,"StateMachine"))

if args.target_types:
    for x in args.target_types:
        msg=x.split(':')[0]
        fo.write('#include "{}/Priority{}.h"\n'.format(args.package_name,msg))


#main
fo.write("\nint main(int argc, char *argv[]){\n")

# state machines
fo.write('StateMachines<{}::StateMachine>  stateMachines("state_machines");\n'.format(args.package_name))

# priority targets
priority_targets = []
if args.priority_topics:
    for x in args.priority_topics:
        topic=x.split(':')[0]
        msg_type=x.split(':')[1]
        fo.write("ReactiveInputs<{}::{}> {}(\"{}\");\n".format(args.package_name,msg_type,'prio_'+topic,topic))
        priority_targets.append('prio_'+topic)

fo.write('ResourceManager mgr(stateMachines, {});\n'.format('{'+', '.join(priority_targets)+'}'))


fo.write("}\n")

fo.close()
